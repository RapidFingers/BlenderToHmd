# Generated by Haxe 3.4.2
# coding: utf-8

from datetime import datetime as python_lib_datetime_Datetime
from datetime import timezone as python_lib_datetime_Timezone
import math as python_lib_Math
import math as Math
import builtins as python_lib_Builtins
import functools as python_lib_Functools
import inspect as python_lib_Inspect
import random as python_lib_Random
from io import StringIO as python_lib_io_StringIO


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            _this = self.params
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")

Enum._hx_class = Enum


class Date:
    _hx_class_name = "Date"
    __slots__ = ("date",)
    _hx_fields = ["date"]
    _hx_methods = ["toString"]
    _hx_statics = ["EPOCH_UTC", "now", "fromTime", "UTC", "datetimeTimestamp", "fromString"]

    def __init__(self,year,month,day,hour,_hx_min,sec):
        if (year < python_lib_datetime_Datetime.min.year):
            year = python_lib_datetime_Datetime.min.year
        if (day == 0):
            day = 1
        self.date = python_lib_datetime_Datetime(year,(month + 1),day,hour,_hx_min,sec,0)

    def toString(self):
        m = ((self.date.month - 1) + 1)
        d = self.date.day
        h = self.date.hour
        mi = self.date.minute
        s = self.date.second
        return ((((((((((Std.string(self.date.year) + "-") + HxOverrides.stringOrNull(((("0" + Std.string(m)) if ((m < 10)) else ("" + Std.string(m)))))) + "-") + HxOverrides.stringOrNull(((("0" + Std.string(d)) if ((d < 10)) else ("" + Std.string(d)))))) + " ") + HxOverrides.stringOrNull(((("0" + Std.string(h)) if ((h < 10)) else ("" + Std.string(h)))))) + ":") + HxOverrides.stringOrNull(((("0" + Std.string(mi)) if ((mi < 10)) else ("" + Std.string(mi)))))) + ":") + HxOverrides.stringOrNull(((("0" + Std.string(s)) if ((s < 10)) else ("" + Std.string(s))))))

    @staticmethod
    def now():
        d = Date(1970,0,1,0,0,0)
        d.date = python_lib_datetime_Datetime.now()
        return d

    @staticmethod
    def fromTime(t):
        d = Date(1970,0,1,0,0,0)
        d.date = python_lib_datetime_Datetime.fromtimestamp((t / 1000.0))
        return d

    @staticmethod
    def UTC(year,month,day,hour,_hx_min,sec):
        return Date.datetimeTimestamp(python_lib_datetime_Datetime(year,(month + 1),day,hour,_hx_min,sec,0,python_lib_datetime_Timezone.utc),Date.EPOCH_UTC)

    @staticmethod
    def datetimeTimestamp(dt,epoch):
        return ((dt - epoch).total_seconds() * 1000)

    @staticmethod
    def fromString(s):
        _g = len(s)
        if (_g == 8):
            k = s.split(":")
            return Date(0,0,0,Std.parseInt((k[0] if 0 < len(k) else None)),Std.parseInt((k[1] if 1 < len(k) else None)),Std.parseInt((k[2] if 2 < len(k) else None)))
        elif (_g == 10):
            k1 = s.split("-")
            return Date(Std.parseInt((k1[0] if 0 < len(k1) else None)),(Std.parseInt((k1[1] if 1 < len(k1) else None)) - 1),Std.parseInt((k1[2] if 2 < len(k1) else None)),0,0,0)
        elif (_g == 19):
            k2 = s.split(" ")
            y = (k2[0] if 0 < len(k2) else None).split("-")
            t = (k2[1] if 1 < len(k2) else None).split(":")
            return Date(Std.parseInt((y[0] if 0 < len(y) else None)),(Std.parseInt((y[1] if 1 < len(y) else None)) - 1),Std.parseInt((y[2] if 2 < len(y) else None)),Std.parseInt((t[0] if 0 < len(t) else None)),Std.parseInt((t[1] if 1 < len(t) else None)),Std.parseInt((t[2] if 2 < len(t) else None)))
        else:
            raise _HxException(("Invalid date format : " + ("null" if s is None else s)))

Date._hx_class = Date


class EnumValue:
    _hx_class_name = "EnumValue"
EnumValue._hx_class = EnumValue


class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field", "isFunction"]

    @staticmethod
    def field(o,field):
        return python_Boot.field(o,field)

    @staticmethod
    def isFunction(f):
        if (not ((python_lib_Inspect.isfunction(f) or python_lib_Inspect.ismethod(f)))):
            return hasattr(f,"func_code")
        else:
            return True
Reflect._hx_class = Reflect


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["string", "parseInt", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")

    @staticmethod
    def parseInt(x):
        if (x is None):
            return None
        try:
            return int(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            try:
                if (HxString.substr(x,0,2).lower() == "0x"):
                    return int(x,16)
                raise _HxException("fail")
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e1 = _hx_e1
                x1 = Std.parseFloat(x)
                r = None
                try:
                    r = int(x1)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    r = None
                if (r is None):
                    r1 = Std.shortenPossibleNumber(x)
                    if (r1 != x):
                        return Std.parseInt(r1)
                    else:
                        return None
                return r

    @staticmethod
    def shortenPossibleNumber(x):
        r = ""
        _g1 = 0
        _g = len(x)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            elif (((((((((((_g2 == 57) or ((_g2 == 56))) or ((_g2 == 55))) or ((_g2 == 54))) or ((_g2 == 53))) or ((_g2 == 52))) or ((_g2 == 51))) or ((_g2 == 50))) or ((_g2 == 49))) or ((_g2 == 48))) or ((_g2 == 46))):
                r = (("null" if r is None else r) + ("null" if c is None else c))
            else:
                break
        return r

    @staticmethod
    def parseFloat(x):
        try:
            return float(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            if (x is not None):
                r1 = Std.shortenPossibleNumber(x)
                if (r1 != x):
                    return Std.parseFloat(r1)
            return Math.NaN
Std._hx_class = Std


class StringBuf:
    _hx_class_name = "StringBuf"
    __slots__ = ("b",)
    _hx_fields = ["b"]

    def __init__(self):
        self.b = python_lib_io_StringIO()

StringBuf._hx_class = StringBuf


class StringTools:
    _hx_class_name = "StringTools"
    __slots__ = ()
    _hx_statics = ["lpad"]

    @staticmethod
    def lpad(s,c,l):
        if (len(c) <= 0):
            return s
        while (len(s) < l):
            s = (("null" if c is None else c) + ("null" if s is None else s))
        return s
StringTools._hx_class = StringTools

class ValueType(Enum):
    __slots__ = ()
    _hx_class_name = "ValueType"

    @staticmethod
    def TClass(c):
        return ValueType("TClass", 6, [c])

    @staticmethod
    def TEnum(e):
        return ValueType("TEnum", 7, [e])
ValueType.TNull = ValueType("TNull", 0, list())
ValueType.TInt = ValueType("TInt", 1, list())
ValueType.TFloat = ValueType("TFloat", 2, list())
ValueType.TBool = ValueType("TBool", 3, list())
ValueType.TObject = ValueType("TObject", 4, list())
ValueType.TFunction = ValueType("TFunction", 5, list())
ValueType.TUnknown = ValueType("TUnknown", 8, list())
ValueType._hx_class = ValueType


class Type:
    _hx_class_name = "Type"
    __slots__ = ()
    _hx_statics = ["typeof"]

    @staticmethod
    def typeof(v):
        if (v is None):
            return ValueType.TNull
        elif isinstance(v,bool):
            return ValueType.TBool
        elif isinstance(v,int):
            return ValueType.TInt
        elif isinstance(v,float):
            return ValueType.TFloat
        elif isinstance(v,str):
            return ValueType.TClass(str)
        elif isinstance(v,list):
            return ValueType.TClass(list)
        elif (isinstance(v,_hx_AnonObject) or python_lib_Inspect.isclass(v)):
            return ValueType.TObject
        elif isinstance(v,Enum):
            return ValueType.TEnum(v.__class__)
        elif (isinstance(v,type) or hasattr(v,"_hx_class")):
            return ValueType.TClass(v.__class__)
        elif callable(v):
            return ValueType.TFunction
        else:
            return ValueType.TUnknown
Type._hx_class = Type

class h2d_BlendMode(Enum):
    __slots__ = ()
    _hx_class_name = "h2d.BlendMode"
h2d_BlendMode._hx_None = h2d_BlendMode("None", 0, list())
h2d_BlendMode.Alpha = h2d_BlendMode("Alpha", 1, list())
h2d_BlendMode.Add = h2d_BlendMode("Add", 2, list())
h2d_BlendMode.SoftAdd = h2d_BlendMode("SoftAdd", 3, list())
h2d_BlendMode.Multiply = h2d_BlendMode("Multiply", 4, list())
h2d_BlendMode.Erase = h2d_BlendMode("Erase", 5, list())
h2d_BlendMode.Screen = h2d_BlendMode("Screen", 6, list())
h2d_BlendMode._hx_class = h2d_BlendMode


class h3d_Quat:
    _hx_class_name = "h3d.Quat"
    __slots__ = ()
h3d_Quat._hx_class = h3d_Quat


class h3d_Vector:
    _hx_class_name = "h3d.Vector"
    __slots__ = ("x", "y", "z", "w")
    _hx_fields = ["x", "y", "z", "w"]

    def __init__(self,x = 0.,y = 0.,z = 0.,w = 1.):
        if (x is None):
            x = 0.
        if (y is None):
            y = 0.
        if (z is None):
            z = 0.
        if (w is None):
            w = 1.
        self.x = x
        self.y = y
        self.z = z
        self.w = w

h3d_Vector._hx_class = h3d_Vector


class h3d_impl__Serializable_EmptyInterface:
    _hx_class_name = "h3d.impl._Serializable.EmptyInterface"
    __slots__ = ()
h3d_impl__Serializable_EmptyInterface._hx_class = h3d_impl__Serializable_EmptyInterface


class h3d_col_Collider:
    _hx_class_name = "h3d.col.Collider"
    __slots__ = ()
h3d_col_Collider._hx_class = h3d_col_Collider


class h3d_col_Bounds:
    _hx_class_name = "h3d.col.Bounds"
    __slots__ = ("xMin", "xMax", "yMin", "yMax", "zMin", "zMax")
    _hx_fields = ["xMin", "xMax", "yMin", "yMax", "zMin", "zMax"]

    def __init__(self):
        self.xMin = 1e20
        self.xMax = -1e20
        self.yMin = 1e20
        self.yMax = -1e20
        self.zMin = 1e20
        self.zMax = -1e20

h3d_col_Bounds._hx_class = h3d_col_Bounds

class h3d_mat_Face(Enum):
    __slots__ = ()
    _hx_class_name = "h3d.mat.Face"
h3d_mat_Face._hx_None = h3d_mat_Face("None", 0, list())
h3d_mat_Face.Back = h3d_mat_Face("Back", 1, list())
h3d_mat_Face.Front = h3d_mat_Face("Front", 2, list())
h3d_mat_Face.Both = h3d_mat_Face("Both", 3, list())
h3d_mat_Face._hx_class = h3d_mat_Face


class h3d_prim_UV:
    _hx_class_name = "h3d.prim.UV"
    __slots__ = ("u", "v")
    _hx_fields = ["u", "v"]

    def __init__(self,u,v):
        self.u = u
        self.v = v

h3d_prim_UV._hx_class = h3d_prim_UV


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()
haxe_IMap._hx_class = haxe_IMap


class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["keys"]

    def keys(self):
        return python_HaxeIterator(iter(self.h.keys()))

haxe_ds_StringMap._hx_class = haxe_ds_StringMap


class haxe_format_JsonPrinter:
    _hx_class_name = "haxe.format.JsonPrinter"
    __slots__ = ("buf", "replacer", "indent", "pretty", "nind")
    _hx_fields = ["buf", "replacer", "indent", "pretty", "nind"]
    _hx_methods = ["write", "fieldsString", "quote"]
    _hx_statics = ["print"]

    def __init__(self,replacer,space):
        self.replacer = replacer
        self.indent = space
        self.pretty = (space is not None)
        self.nind = 0
        self.buf = StringBuf()

    def write(self,k,v):
        if (self.replacer is not None):
            v = self.replacer(k,v)
        _g = Type.typeof(v)
        _g1 = _g.index
        if (_g1 == 0):
            self.buf.b.write("null")
        elif (_g1 == 1):
            _this = self.buf
            s = Std.string(v)
            _this.b.write(s)
        elif (_g1 == 2):
            v1 = None
            f = v
            if (((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(f))):
                v1 = v
            else:
                v1 = "null"
            _this1 = self.buf
            s1 = Std.string(v1)
            _this1.b.write(s1)
        elif (_g1 == 3):
            _this2 = self.buf
            s2 = Std.string(v)
            _this2.b.write(s2)
        elif (_g1 == 4):
            self.fieldsString(v,python_Boot.fields(v))
        elif (_g1 == 5):
            self.buf.b.write("\"<fun>\"")
        elif (_g1 == 6):
            c = _g.params[0]
            if (c == str):
                self.quote(v)
            elif (c == list):
                v2 = v
                _this3 = self.buf
                s3 = "".join(map(chr,[91]))
                _this3.b.write(s3)
                _hx_len = len(v2)
                last = (_hx_len - 1)
                _g11 = 0
                while (_g11 < _hx_len):
                    i = _g11
                    _g11 = (_g11 + 1)
                    if (i > 0):
                        _this4 = self.buf
                        s4 = "".join(map(chr,[44]))
                        _this4.b.write(s4)
                    else:
                        _hx_local_0 = self
                        _hx_local_1 = _hx_local_0.nind
                        _hx_local_0.nind = (_hx_local_1 + 1)
                        _hx_local_1
                    if self.pretty:
                        _this5 = self.buf
                        s5 = "".join(map(chr,[10]))
                        _this5.b.write(s5)
                    if self.pretty:
                        _this6 = self.buf
                        s6 = Std.string(StringTools.lpad("",self.indent,(self.nind * len(self.indent))))
                        _this6.b.write(s6)
                    self.write(i,(v2[i] if i >= 0 and i < len(v2) else None))
                    if (i == last):
                        _hx_local_2 = self
                        _hx_local_3 = _hx_local_2.nind
                        _hx_local_2.nind = (_hx_local_3 - 1)
                        _hx_local_3
                        if self.pretty:
                            _this7 = self.buf
                            s7 = "".join(map(chr,[10]))
                            _this7.b.write(s7)
                        if self.pretty:
                            _this8 = self.buf
                            s8 = Std.string(StringTools.lpad("",self.indent,(self.nind * len(self.indent))))
                            _this8.b.write(s8)
                _this9 = self.buf
                s9 = "".join(map(chr,[93]))
                _this9.b.write(s9)
            elif (c == haxe_ds_StringMap):
                v3 = v
                o = _hx_AnonObject({})
                k1 = v3.keys()
                while k1.hasNext():
                    k2 = k1.next()
                    value = v3.h.get(k2,None)
                    setattr(o,(("_hx_" + k2) if ((k2 in python_Boot.keywords)) else (("_hx_" + k2) if (((((len(k2) > 2) and ((ord(k2[0]) == 95))) and ((ord(k2[1]) == 95))) and ((ord(k2[(len(k2) - 1)]) != 95)))) else k2)),value)
                self.fieldsString(o,python_Boot.fields(o))
            elif (c == Date):
                self.quote(v.toString())
            else:
                self.fieldsString(v,python_Boot.fields(v))
        elif (_g1 == 7):
            _this10 = self.buf
            s10 = Std.string(v.index)
            _this10.b.write(s10)
        elif (_g1 == 8):
            self.buf.b.write("\"???\"")
        else:
            pass

    def fieldsString(self,v,fields):
        _this = self.buf
        s = "".join(map(chr,[123]))
        _this.b.write(s)
        _hx_len = len(fields)
        last = (_hx_len - 1)
        first = True
        _g1 = 0
        while (_g1 < _hx_len):
            i = _g1
            _g1 = (_g1 + 1)
            f = (fields[i] if i >= 0 and i < len(fields) else None)
            value = Reflect.field(v,f)
            if Reflect.isFunction(value):
                continue
            if first:
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.nind
                _hx_local_0.nind = (_hx_local_1 + 1)
                _hx_local_1
                first = False
            else:
                _this1 = self.buf
                s1 = "".join(map(chr,[44]))
                _this1.b.write(s1)
            if self.pretty:
                _this2 = self.buf
                s2 = "".join(map(chr,[10]))
                _this2.b.write(s2)
            if self.pretty:
                _this3 = self.buf
                s3 = Std.string(StringTools.lpad("",self.indent,(self.nind * len(self.indent))))
                _this3.b.write(s3)
            self.quote(f)
            _this4 = self.buf
            s4 = "".join(map(chr,[58]))
            _this4.b.write(s4)
            if self.pretty:
                _this5 = self.buf
                s5 = "".join(map(chr,[32]))
                _this5.b.write(s5)
            self.write(f,value)
            if (i == last):
                _hx_local_2 = self
                _hx_local_3 = _hx_local_2.nind
                _hx_local_2.nind = (_hx_local_3 - 1)
                _hx_local_3
                if self.pretty:
                    _this6 = self.buf
                    s6 = "".join(map(chr,[10]))
                    _this6.b.write(s6)
                if self.pretty:
                    _this7 = self.buf
                    s7 = Std.string(StringTools.lpad("",self.indent,(self.nind * len(self.indent))))
                    _this7.b.write(s7)
        _this8 = self.buf
        s8 = "".join(map(chr,[125]))
        _this8.b.write(s8)

    def quote(self,s):
        _this = self.buf
        s1 = "".join(map(chr,[34]))
        _this.b.write(s1)
        i = 0
        while True:
            index = i
            i = (i + 1)
            c = (-1 if ((index >= len(s))) else ord(s[index]))
            if (c == -1):
                break
            c1 = c
            if (c1 == 8):
                self.buf.b.write("\\b")
            elif (c1 == 9):
                self.buf.b.write("\\t")
            elif (c1 == 10):
                self.buf.b.write("\\n")
            elif (c1 == 12):
                self.buf.b.write("\\f")
            elif (c1 == 13):
                self.buf.b.write("\\r")
            elif (c1 == 34):
                self.buf.b.write("\\\"")
            elif (c1 == 92):
                self.buf.b.write("\\\\")
            else:
                _this1 = self.buf
                s2 = "".join(map(chr,[c]))
                _this1.b.write(s2)
        _this2 = self.buf
        s3 = "".join(map(chr,[34]))
        _this2.b.write(s3)

    @staticmethod
    def print(o,replacer = None,space = None):
        printer = haxe_format_JsonPrinter(replacer,space)
        printer.write("",o)
        return printer.buf.b.getvalue()

haxe_format_JsonPrinter._hx_class = haxe_format_JsonPrinter


class haxe_io_Bytes:
    _hx_class_name = "haxe.io.Bytes"
    __slots__ = ("length", "b")
    _hx_fields = ["length", "b"]
    _hx_statics = ["ofString"]

    def __init__(self,length,b):
        self.length = length
        self.b = b

    @staticmethod
    def ofString(s):
        b = bytearray(s,"UTF-8")
        return haxe_io_Bytes(len(b),b)

haxe_io_Bytes._hx_class = haxe_io_Bytes


class haxe_io_BytesBuffer:
    _hx_class_name = "haxe.io.BytesBuffer"
    __slots__ = ("b",)
    _hx_fields = ["b"]
    _hx_methods = ["getBytes"]

    def __init__(self):
        self.b = list()

    def getBytes(self):
        buf = bytearray(self.b)
        _hx_bytes = haxe_io_Bytes(len(buf),buf)
        self.b = None
        return _hx_bytes

haxe_io_BytesBuffer._hx_class = haxe_io_BytesBuffer


class haxe_io_Output:
    _hx_class_name = "haxe.io.Output"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["writeByte", "writeBytes", "set_bigEndian", "write", "writeFullBytes", "writeFloat", "writeUInt16", "writeInt32", "writeString"]

    def writeByte(self,c):
        raise _HxException("Not implemented")

    def writeBytes(self,s,pos,_hx_len):
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > s.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        b = s.b
        k = _hx_len
        while (k > 0):
            self.writeByte(b[pos])
            pos = (pos + 1)
            k = (k - 1)
        return _hx_len

    def set_bigEndian(self,b):
        self.bigEndian = b
        return b

    def write(self,s):
        l = s.length
        p = 0
        while (l > 0):
            k = self.writeBytes(s,p,l)
            if (k == 0):
                raise _HxException(haxe_io_Error.Blocked)
            p = (p + k)
            l = (l - k)

    def writeFullBytes(self,s,pos,_hx_len):
        while (_hx_len > 0):
            k = self.writeBytes(s,pos,_hx_len)
            pos = (pos + k)
            _hx_len = (_hx_len - k)

    def writeFloat(self,x):
        self.writeInt32(haxe_io_FPHelper.floatToI32(x))

    def writeUInt16(self,x):
        if ((x < 0) or ((x >= 65536))):
            raise _HxException(haxe_io_Error.Overflow)
        if self.bigEndian:
            self.writeByte((x >> 8))
            self.writeByte((x & 255))
        else:
            self.writeByte((x & 255))
            self.writeByte((x >> 8))

    def writeInt32(self,x):
        if self.bigEndian:
            self.writeByte(HxOverrides.rshift(x, 24))
            self.writeByte(((x >> 16) & 255))
            self.writeByte(((x >> 8) & 255))
            self.writeByte((x & 255))
        else:
            self.writeByte((x & 255))
            self.writeByte(((x >> 8) & 255))
            self.writeByte(((x >> 16) & 255))
            self.writeByte(HxOverrides.rshift(x, 24))

    def writeString(self,s):
        b = haxe_io_Bytes.ofString(s)
        self.writeFullBytes(b,0,b.length)

haxe_io_Output._hx_class = haxe_io_Output


class haxe_io_BytesOutput(haxe_io_Output):
    _hx_class_name = "haxe.io.BytesOutput"
    __slots__ = ("b",)
    _hx_fields = ["b"]
    _hx_methods = ["writeByte", "writeBytes", "getBytes"]
    _hx_statics = []
    _hx_super = haxe_io_Output


    def __init__(self):
        self.b = haxe_io_BytesBuffer()
        self.set_bigEndian(False)

    def writeByte(self,c):
        self.b.b.append(c)

    def writeBytes(self,buf,pos,_hx_len):
        _this = self.b
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > buf.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        b2 = buf.b
        _g1 = pos
        _g = (pos + _hx_len)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            _this.b.append(b2[i])
        return _hx_len

    def getBytes(self):
        return self.b.getBytes()

haxe_io_BytesOutput._hx_class = haxe_io_BytesOutput


class haxe_io_Eof:
    _hx_class_name = "haxe.io.Eof"
    __slots__ = ()
    _hx_methods = ["toString"]

    def toString(self):
        return "Eof"

haxe_io_Eof._hx_class = haxe_io_Eof

class haxe_io_Error(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Error"

    @staticmethod
    def Custom(e):
        return haxe_io_Error("Custom", 3, [e])
haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, list())
haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, list())
haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, list())
haxe_io_Error._hx_class = haxe_io_Error


class haxe_io_FPHelper:
    _hx_class_name = "haxe.io.FPHelper"
    __slots__ = ()
    _hx_statics = ["floatToI32"]

    @staticmethod
    def floatToI32(f):
        if (f == 0):
            return 0
        af = (-f if ((f < 0)) else f)
        exp = Math.floor((((Math.NEGATIVE_INFINITY if ((af == 0.0)) else (Math.NaN if ((af < 0.0)) else python_lib_Math.log(af)))) / 0.6931471805599453))
        if (exp < -127):
            exp = -127
        elif (exp > 128):
            exp = 128
        sig = Math.floor((((((af / Math.pow(2,exp)) - 1)) * 8388608) + 0.5))
        if ((sig == 8388608) and ((exp < 128))):
            sig = 0
            exp = (exp + 1)
        return ((((-2147483648 if ((f < 0)) else 0)) | (((exp + 127) << 23))) | sig)
haxe_io_FPHelper._hx_class = haxe_io_FPHelper

class hxd_fmt_hmd_Property(Enum):
    __slots__ = ()
    _hx_class_name = "hxd.fmt.hmd.Property"

    @staticmethod
    def CameraFOVY(v):
        return hxd_fmt_hmd_Property("CameraFOVY", 0, [v])
hxd_fmt_hmd_Property.HasMaterialFlags = hxd_fmt_hmd_Property("HasMaterialFlags", 1, list())
hxd_fmt_hmd_Property._hx_class = hxd_fmt_hmd_Property


class hxd_fmt_hmd_Position:
    _hx_class_name = "hxd.fmt.hmd.Position"
    __slots__ = ("x", "y", "z", "qx", "qy", "qz", "sx", "sy", "sz")
    _hx_fields = ["x", "y", "z", "qx", "qy", "qz", "sx", "sy", "sz"]

    def __init__(self):
        self.sz = None
        self.sy = None
        self.sx = None
        self.qz = None
        self.qy = None
        self.qx = None
        self.z = None
        self.y = None
        self.x = None

hxd_fmt_hmd_Position._hx_class = hxd_fmt_hmd_Position


class hxd_fmt_hmd_GeometryFormat:
    _hx_class_name = "hxd.fmt.hmd.GeometryFormat"
    __slots__ = ("name", "format")
    _hx_fields = ["name", "format"]

    def __init__(self,name,format):
        self.name = name
        self.format = format

hxd_fmt_hmd_GeometryFormat._hx_class = hxd_fmt_hmd_GeometryFormat


class hxd_fmt_hmd_Geometry:
    _hx_class_name = "hxd.fmt.hmd.Geometry"
    __slots__ = ("props", "vertexCount", "vertexStride", "vertexFormat", "vertexPosition", "indexCounts", "indexPosition", "bounds")
    _hx_fields = ["props", "vertexCount", "vertexStride", "vertexFormat", "vertexPosition", "indexCounts", "indexPosition", "bounds"]

    def __init__(self):
        self.bounds = None
        self.indexPosition = None
        self.indexCounts = None
        self.vertexPosition = None
        self.vertexFormat = None
        self.vertexStride = None
        self.vertexCount = None
        self.props = None

hxd_fmt_hmd_Geometry._hx_class = hxd_fmt_hmd_Geometry

class hxd_fmt_hmd_MaterialFlag(Enum):
    __slots__ = ()
    _hx_class_name = "hxd.fmt.hmd.MaterialFlag"
hxd_fmt_hmd_MaterialFlag.HasLighting = hxd_fmt_hmd_MaterialFlag("HasLighting", 0, list())
hxd_fmt_hmd_MaterialFlag.CastShadows = hxd_fmt_hmd_MaterialFlag("CastShadows", 1, list())
hxd_fmt_hmd_MaterialFlag.ReceiveShadows = hxd_fmt_hmd_MaterialFlag("ReceiveShadows", 2, list())
hxd_fmt_hmd_MaterialFlag.TextureWrap = hxd_fmt_hmd_MaterialFlag("TextureWrap", 3, list())
hxd_fmt_hmd_MaterialFlag.IsVolumeDecal = hxd_fmt_hmd_MaterialFlag("IsVolumeDecal", 4, list())
hxd_fmt_hmd_MaterialFlag._hx_class = hxd_fmt_hmd_MaterialFlag


class hxd_fmt_hmd_Material:
    _hx_class_name = "hxd.fmt.hmd.Material"
    __slots__ = ("name", "props", "diffuseTexture", "blendMode", "culling", "killAlpha", "flags")
    _hx_fields = ["name", "props", "diffuseTexture", "blendMode", "culling", "killAlpha", "flags"]

    def __init__(self):
        self.flags = None
        self.killAlpha = None
        self.culling = None
        self.blendMode = None
        self.diffuseTexture = None
        self.props = None
        self.name = None

hxd_fmt_hmd_Material._hx_class = hxd_fmt_hmd_Material


class hxd_fmt_hmd_SkinJoint:
    _hx_class_name = "hxd.fmt.hmd.SkinJoint"
    __slots__ = ("name", "props", "parent", "position", "bind", "transpos")
    _hx_fields = ["name", "props", "parent", "position", "bind", "transpos"]

    def __init__(self):
        self.transpos = None
        self.bind = None
        self.position = None
        self.parent = None
        self.props = None
        self.name = None

hxd_fmt_hmd_SkinJoint._hx_class = hxd_fmt_hmd_SkinJoint


class hxd_fmt_hmd_SkinSplit:
    _hx_class_name = "hxd.fmt.hmd.SkinSplit"
    __slots__ = ("materialIndex", "joints")
    _hx_fields = ["materialIndex", "joints"]

hxd_fmt_hmd_SkinSplit._hx_class = hxd_fmt_hmd_SkinSplit


class hxd_fmt_hmd_Skin:
    _hx_class_name = "hxd.fmt.hmd.Skin"
    __slots__ = ("name", "props", "joints", "split")
    _hx_fields = ["name", "props", "joints", "split"]

    def __init__(self):
        self.split = None
        self.joints = None
        self.props = None
        self.name = None

hxd_fmt_hmd_Skin._hx_class = hxd_fmt_hmd_Skin


class hxd_fmt_hmd_Model:
    _hx_class_name = "hxd.fmt.hmd.Model"
    __slots__ = ("name", "props", "parent", "follow", "position", "geometry", "materials", "skin")
    _hx_fields = ["name", "props", "parent", "follow", "position", "geometry", "materials", "skin"]

    def __init__(self):
        self.skin = None
        self.materials = None
        self.geometry = None
        self.position = None
        self.follow = None
        self.parent = None
        self.props = None
        self.name = None

hxd_fmt_hmd_Model._hx_class = hxd_fmt_hmd_Model

class hxd_fmt_hmd_AnimationFlag(Enum):
    __slots__ = ()
    _hx_class_name = "hxd.fmt.hmd.AnimationFlag"
hxd_fmt_hmd_AnimationFlag.HasPosition = hxd_fmt_hmd_AnimationFlag("HasPosition", 0, list())
hxd_fmt_hmd_AnimationFlag.HasRotation = hxd_fmt_hmd_AnimationFlag("HasRotation", 1, list())
hxd_fmt_hmd_AnimationFlag.HasScale = hxd_fmt_hmd_AnimationFlag("HasScale", 2, list())
hxd_fmt_hmd_AnimationFlag.HasUV = hxd_fmt_hmd_AnimationFlag("HasUV", 3, list())
hxd_fmt_hmd_AnimationFlag.HasAlpha = hxd_fmt_hmd_AnimationFlag("HasAlpha", 4, list())
hxd_fmt_hmd_AnimationFlag.SinglePosition = hxd_fmt_hmd_AnimationFlag("SinglePosition", 5, list())
hxd_fmt_hmd_AnimationFlag.HasProps = hxd_fmt_hmd_AnimationFlag("HasProps", 6, list())
hxd_fmt_hmd_AnimationFlag.Reserved = hxd_fmt_hmd_AnimationFlag("Reserved", 7, list())
hxd_fmt_hmd_AnimationFlag._hx_class = hxd_fmt_hmd_AnimationFlag


class hxd_fmt_hmd_AnimationObject:
    _hx_class_name = "hxd.fmt.hmd.AnimationObject"
    __slots__ = ("name", "flags", "props")
    _hx_fields = ["name", "flags", "props"]

hxd_fmt_hmd_AnimationObject._hx_class = hxd_fmt_hmd_AnimationObject


class hxd_fmt_hmd_AnimationEvent:
    _hx_class_name = "hxd.fmt.hmd.AnimationEvent"
    __slots__ = ("frame", "data")
    _hx_fields = ["frame", "data"]

hxd_fmt_hmd_AnimationEvent._hx_class = hxd_fmt_hmd_AnimationEvent


class hxd_fmt_hmd_Animation:
    _hx_class_name = "hxd.fmt.hmd.Animation"
    __slots__ = ("name", "props", "frames", "sampling", "speed", "loop", "objects", "events", "dataPosition")
    _hx_fields = ["name", "props", "frames", "sampling", "speed", "loop", "objects", "events", "dataPosition"]

hxd_fmt_hmd_Animation._hx_class = hxd_fmt_hmd_Animation


class hxd_fmt_hmd_Data:
    _hx_class_name = "hxd.fmt.hmd.Data"
    __slots__ = ("version", "props", "geometries", "materials", "models", "animations", "dataPosition", "data")
    _hx_fields = ["version", "props", "geometries", "materials", "models", "animations", "dataPosition", "data"]

    def __init__(self):
        self.data = None
        self.dataPosition = None
        self.animations = None
        self.models = None
        self.materials = None
        self.geometries = None
        self.props = None
        self.version = None

hxd_fmt_hmd_Data._hx_class = hxd_fmt_hmd_Data


class hxd_fmt_hmd_Writer:
    _hx_class_name = "hxd.fmt.hmd.Writer"
    __slots__ = ("out", "version")
    _hx_fields = ["out", "version"]
    _hx_methods = ["writeProperty", "writeProps", "writeName", "writePosition", "writeBounds", "writeSkin", "write"]

    def __init__(self,out):
        self.version = None
        self.out = out

    def writeProperty(self,p):
        self.out.writeByte(p.index)
        p1 = p.index
        if (p1 == 0):
            self.out.writeFloat(p.params[0])
        elif (p1 == 1):
            pass
        else:
            pass

    def writeProps(self,props):
        if (props is None):
            if (self.version == 1):
                return
            self.out.writeByte(0)
            return
        if (self.version == 1):
            raise _HxException("Properties not supported in HMDv1")
        self.out.writeByte(len(props))
        _g = 0
        while (_g < len(props)):
            p = (props[_g] if _g >= 0 and _g < len(props) else None)
            _g = (_g + 1)
            self.writeProperty(p)

    def writeName(self,name):
        if (name is None):
            self.out.writeByte(255)
            return
        self.out.writeByte(len(name))
        self.out.writeString(name)

    def writePosition(self,p,hasScale = True):
        if (hasScale is None):
            hasScale = True
        f = p.x
        self.out.writeFloat((0 if ((f == 0)) else f))
        f1 = p.y
        self.out.writeFloat((0 if ((f1 == 0)) else f1))
        f2 = p.z
        self.out.writeFloat((0 if ((f2 == 0)) else f2))
        f3 = p.qx
        self.out.writeFloat((0 if ((f3 == 0)) else f3))
        f4 = p.qy
        self.out.writeFloat((0 if ((f4 == 0)) else f4))
        f5 = p.qz
        self.out.writeFloat((0 if ((f5 == 0)) else f5))
        if hasScale:
            f6 = p.sx
            self.out.writeFloat((0 if ((f6 == 0)) else f6))
            f7 = p.sy
            self.out.writeFloat((0 if ((f7 == 0)) else f7))
            f8 = p.sz
            self.out.writeFloat((0 if ((f8 == 0)) else f8))

    def writeBounds(self,b):
        f = b.xMin
        self.out.writeFloat((0 if ((f == 0)) else f))
        f1 = b.yMin
        self.out.writeFloat((0 if ((f1 == 0)) else f1))
        f2 = b.zMin
        self.out.writeFloat((0 if ((f2 == 0)) else f2))
        f3 = b.xMax
        self.out.writeFloat((0 if ((f3 == 0)) else f3))
        f4 = b.yMax
        self.out.writeFloat((0 if ((f4 == 0)) else f4))
        f5 = b.zMax
        self.out.writeFloat((0 if ((f5 == 0)) else f5))

    def writeSkin(self,s):
        self.writeName(("" if ((s.name is None)) else s.name))
        self.writeProps(s.props)
        self.out.writeUInt16(len(s.joints))
        _g = 0
        _g1 = s.joints
        while (_g < len(_g1)):
            j = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.writeProps(j.props)
            self.writeName(j.name)
            rot = ((((j.position.sx != 1) or ((j.position.sy != 1))) or ((j.position.sz != 1))) or (((j.transpos is not None) and ((((j.transpos.sx != 1) or ((j.transpos.sy != 1))) or ((j.transpos.sz != 1)))))))
            self.out.writeUInt16(((j.parent + 1) | ((32768 if rot else 0))))
            self.writePosition(j.position,rot)
            self.out.writeUInt16((j.bind + 1))
            if (j.bind >= 0):
                self.writePosition(j.transpos,rot)
        self.out.writeByte((0 if ((s.split is None)) else len(s.split)))
        if (s.split is not None):
            _g2 = 0
            _g11 = s.split
            while (_g2 < len(_g11)):
                ss = (_g11[_g2] if _g2 >= 0 and _g2 < len(_g11) else None)
                _g2 = (_g2 + 1)
                self.out.writeByte(ss.materialIndex)
                self.out.writeByte(len(ss.joints))
                _g21 = 0
                _g3 = ss.joints
                while (_g21 < len(_g3)):
                    i = (_g3[_g21] if _g21 >= 0 and _g21 < len(_g3) else None)
                    _g21 = (_g21 + 1)
                    self.out.writeUInt16(i)

    def write(self,d):
        old = self.out
        header = haxe_io_BytesOutput()
        self.out = header
        self.version = d.version
        if (self.version > 2):
            raise _HxException(("Can't write HMD v" + Std.string(self.version)))
        self.writeProps(d.props)
        self.out.writeInt32(len(d.geometries))
        _g = 0
        _g1 = d.geometries
        while (_g < len(_g1)):
            g = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            self.writeProps(g.props)
            self.out.writeInt32(g.vertexCount)
            self.out.writeByte(g.vertexStride)
            self.out.writeByte(len(g.vertexFormat))
            _g2 = 0
            _g3 = g.vertexFormat
            while (_g2 < len(_g3)):
                f = (_g3[_g2] if _g2 >= 0 and _g2 < len(_g3) else None)
                _g2 = (_g2 + 1)
                self.writeName(f.name)
                self.out.writeByte(f.format)
            self.out.writeInt32(g.vertexPosition)
            self.out.writeByte(len(g.indexCounts))
            _g21 = 0
            _g31 = g.indexCounts
            while (_g21 < len(_g31)):
                i = (_g31[_g21] if _g21 >= 0 and _g21 < len(_g31) else None)
                _g21 = (_g21 + 1)
                self.out.writeInt32(i)
            self.out.writeInt32(g.indexPosition)
            self.writeBounds(g.bounds)
        self.out.writeInt32(len(d.materials))
        _g4 = 0
        _g11 = d.materials
        while (_g4 < len(_g11)):
            m = (_g11[_g4] if _g4 >= 0 and _g4 < len(_g11) else None)
            _g4 = (_g4 + 1)
            self.writeProps(m.props)
            self.writeName(m.name)
            self.writeName(m.diffuseTexture)
            self.out.writeByte(m.blendMode.index)
            self.out.writeByte(m.culling.index)
            f1 = (1 if ((m.killAlpha is None)) else m.killAlpha)
            self.out.writeFloat((0 if ((f1 == 0)) else f1))
            if ((m.props is not None) and ((python_internal_ArrayImpl.indexOf(m.props,hxd_fmt_hmd_Property.HasMaterialFlags,None) >= 0))):
                self.out.writeInt32(m.flags)
        self.out.writeInt32(len(d.models))
        _g5 = 0
        _g12 = d.models
        while (_g5 < len(_g12)):
            m1 = (_g12[_g5] if _g5 >= 0 and _g5 < len(_g12) else None)
            _g5 = (_g5 + 1)
            self.writeProps(m1.props)
            self.writeName(m1.name)
            self.out.writeInt32((m1.parent + 1))
            self.writeName(m1.follow)
            self.writePosition(m1.position)
            self.out.writeInt32((m1.geometry + 1))
            if (m1.geometry < 0):
                continue
            self.out.writeByte(len(m1.materials))
            _g22 = 0
            _g32 = m1.materials
            while (_g22 < len(_g32)):
                m2 = (_g32[_g22] if _g22 >= 0 and _g22 < len(_g32) else None)
                _g22 = (_g22 + 1)
                self.out.writeInt32(m2)
            if (m1.skin is None):
                self.writeName(None)
            else:
                self.writeSkin(m1.skin)
        self.out.writeInt32(len(d.animations))
        _g6 = 0
        _g13 = d.animations
        while (_g6 < len(_g13)):
            a = (_g13[_g6] if _g6 >= 0 and _g6 < len(_g13) else None)
            _g6 = (_g6 + 1)
            self.writeProps(a.props)
            self.writeName(a.name)
            self.out.writeInt32(a.frames)
            f2 = a.sampling
            self.out.writeFloat((0 if ((f2 == 0)) else f2))
            f3 = a.speed
            self.out.writeFloat((0 if ((f3 == 0)) else f3))
            self.out.writeByte((((1 if (a.loop) else 0)) | ((2 if ((a.events is not None)) else 0))))
            self.out.writeInt32(a.dataPosition)
            self.out.writeInt32(len(a.objects))
            _g23 = 0
            _g33 = a.objects
            while (_g23 < len(_g33)):
                o = (_g33[_g23] if _g23 >= 0 and _g23 < len(_g33) else None)
                _g23 = (_g23 + 1)
                self.writeName(o.name)
                self.out.writeByte(o.flags)
                if (((o.flags & ((1 << hxd_fmt_hmd_AnimationFlag.HasProps.index)))) != 0):
                    self.out.writeByte(len(o.props))
                    _g41 = 0
                    _g51 = o.props
                    while (_g41 < len(_g51)):
                        n = (_g51[_g41] if _g41 >= 0 and _g41 < len(_g51) else None)
                        _g41 = (_g41 + 1)
                        self.writeName(n)
            if (a.events is not None):
                self.out.writeInt32(len(a.events))
                _g24 = 0
                _g34 = a.events
                while (_g24 < len(_g34)):
                    e = (_g34[_g24] if _g24 >= 0 and _g24 < len(_g34) else None)
                    _g24 = (_g24 + 1)
                    self.out.writeInt32(e.frame)
                    self.writeName(e.data)
        _hx_bytes = header.getBytes()
        self.out = old
        self.out.writeString("HMD")
        self.out.writeByte(d.version)
        self.out.writeInt32((_hx_bytes.length + 12))
        self.out.write(_hx_bytes)
        self.out.writeInt32(d.data.length)
        self.out.write(d.data)

hxd_fmt_hmd_Writer._hx_class = hxd_fmt_hmd_Writer


class io_Exporter:
    _hx_class_name = "io.Exporter"
    __slots__ = ("dataBytes",)
    _hx_fields = ["dataBytes"]
    _hx_methods = ["getSkin", "addModel", "write"]

    def __init__(self):
        self.dataBytes = None

    def getSkin(self,skin):
        nskin = hxd_fmt_hmd_Skin()
        nskin.name = "Skin"
        nskin.joints = list()
        _g = 0
        _g1 = skin.joints
        while (_g < len(_g1)):
            j = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            njoint = hxd_fmt_hmd_SkinJoint()
            njoint.name = j.name
            njoint.position = hxd_fmt_hmd_Position()
            njoint.position.x = j.position.x
            njoint.position.y = j.position.y
            njoint.position.z = j.position.z
            nskin.joints.append(njoint)
        return nskin

    def addModel(self,hmd,model):
        egeom = model.geometry
        ngeom = hxd_fmt_hmd_Geometry()
        ngeom.vertexCount = len(egeom.vertexArray)
        ngeom.vertexPosition = 0
        ngeom.vertexFormat = [hxd_fmt_hmd_GeometryFormat("position",3), hxd_fmt_hmd_GeometryFormat("normal",3)]
        if egeom.hasUv:
            ngeom.vertexStride = 8
            pu = hxd_fmt_hmd_GeometryFormat("uv",2)
            ngeom.vertexFormat.append(pu)
        else:
            ngeom.vertexStride = 6
        ngeom.indexCounts = [len(egeom.indexArray)]
        b = h3d_col_Bounds()
        b.xMin = 0
        b.yMin = 0
        b.zMin = 0
        b.xMax = 1
        b.yMax = 1
        b.zMax = 1
        ngeom.bounds = b
        nmodel = hxd_fmt_hmd_Model()
        nmodel.name = model.name
        nmodel.geometry = 0
        nmodel.parent = -1
        nmodel.position = hxd_fmt_hmd_Position()
        nmodel.position.x = 0
        nmodel.position.y = 0
        nmodel.position.z = 0
        nmodel.position.qx = 0
        nmodel.position.qy = 0
        nmodel.position.qz = 0
        nmodel.position.sx = 1
        nmodel.position.sy = 1
        nmodel.position.sz = 1
        nmodel.materials = [0]
        _hx_bytes = self.dataBytes
        nmat = hxd_fmt_hmd_Material()
        nmat.name = "Default"
        nmat.blendMode = h2d_BlendMode._hx_None
        nmat.culling = h3d_mat_Face.Back
        hmd.geometries.append(ngeom)
        hmd.models.append(nmodel)
        hmd.materials.append(nmat)
        hmd.dataPosition = len(_hx_bytes.b.b)
        _g = 0
        _g1 = egeom.vertexArray
        while (_g < len(_g1)):
            vert = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            _hx_bytes.writeFloat(vert.position.x)
            _hx_bytes.writeFloat(vert.position.y)
            _hx_bytes.writeFloat(vert.position.z)
            _hx_bytes.writeFloat(vert.normal.x)
            _hx_bytes.writeFloat(vert.normal.y)
            _hx_bytes.writeFloat(vert.normal.z)
            if egeom.hasUv:
                _hx_bytes.writeFloat(vert.uv.u)
                _hx_bytes.writeFloat(vert.uv.v)
        ngeom.indexPosition = len(_hx_bytes.b.b)
        _g2 = 0
        _g11 = egeom.indexArray
        while (_g2 < len(_g11)):
            idx = (_g11[_g2] if _g2 >= 0 and _g2 < len(_g11) else None)
            _g2 = (_g2 + 1)
            _hx_bytes.writeUInt16(idx)
        if (model.skin is not None):
            nmodel.skin = self.getSkin(model.skin)

    def write(self,filepath,scene):
        sys_io_File.saveContent((("null" if filepath is None else filepath) + ".trace"),haxe_format_JsonPrinter.print(scene,None," "))
        io1 = haxe_io_BytesOutput()
        writer = hxd_fmt_hmd_Writer(io1)
        hmd = hxd_fmt_hmd_Data()
        hmd.version = 2
        hmd.geometries = list()
        hmd.materials = list()
        hmd.models = list()
        hmd.animations = list()
        self.dataBytes = haxe_io_BytesOutput()
        if (len(scene.modelArray) > 0):
            self.addModel(hmd,(scene.modelArray[0] if 0 < len(scene.modelArray) else None))
        hmd.data = self.dataBytes.getBytes()
        writer.write(hmd)
        sys_io_File.saveBytes(filepath,io1.getBytes())

io_Exporter._hx_class = io_Exporter


class io_Geometry:
    _hx_class_name = "io.Geometry"
    __slots__ = ("vertexArray", "indexArray", "hasUv", "hasWeights")
    _hx_fields = ["vertexArray", "indexArray", "hasUv", "hasWeights"]
    _hx_methods = ["addVertex", "addIndex"]

    def __init__(self):
        self.hasWeights = None
        self.hasUv = None
        self.vertexArray = list()
        self.indexArray = list()

    def addVertex(self,vertex):
        self.vertexArray.append(vertex)

    def addIndex(self,index):
        self.indexArray.append(index)

io_Geometry._hx_class = io_Geometry


class io_Joint:
    _hx_class_name = "io.Joint"
    __slots__ = ("index", "parentIndex", "name", "position", "quat")
    _hx_fields = ["index", "parentIndex", "name", "position", "quat"]
    _hx_methods = ["setPosition"]

    def __init__(self):
        self.quat = None
        self.name = None
        self.parentIndex = None
        self.index = None
        self.position = h3d_Vector(0,0,0,0)

    def setPosition(self,x,y,z):
        self.position.x = x
        self.position.y = y
        self.position.z = z

io_Joint._hx_class = io_Joint


class io_Model:
    _hx_class_name = "io.Model"
    __slots__ = ("name", "geometry", "skin")
    _hx_fields = ["name", "geometry", "skin"]

    def __init__(self):
        self.skin = None
        self.geometry = None
        self.name = "Object"

io_Model._hx_class = io_Model


class io_Scene:
    _hx_class_name = "io.Scene"
    __slots__ = ("modelArray",)
    _hx_fields = ["modelArray"]
    _hx_methods = ["addModel"]

    def __init__(self):
        self.modelArray = list()

    def addModel(self,m):
        self.modelArray.append(m)

io_Scene._hx_class = io_Scene


class io_Skin:
    _hx_class_name = "io.Skin"
    __slots__ = ("bonePerVertex", "joints")
    _hx_fields = ["bonePerVertex", "joints"]
    _hx_methods = ["addJoint"]

    def __init__(self):
        self.bonePerVertex = 4
        self.joints = list()

    def addJoint(self,joint):
        self.joints.append(joint)

io_Skin._hx_class = io_Skin


class io_Vertex:
    _hx_class_name = "io.Vertex"
    __slots__ = ("position", "normal", "uv", "weights")
    _hx_fields = ["position", "normal", "uv", "weights"]
    _hx_methods = ["setPosition", "setNormal", "setUv", "addWeight"]
    _hx_statics = ["MAX_WEIGHT_COUNT"]

    def __init__(self):
        self.position = h3d_Vector()
        self.normal = h3d_Vector()
        self.uv = h3d_prim_UV(0,0)
        self.weights = list()

    def setPosition(self,x,y,z):
        self.position.x = x
        self.position.y = y
        self.position.z = z

    def setNormal(self,x,y,z):
        self.normal.x = x
        self.normal.y = y
        self.normal.z = z

    def setUv(self,u,v):
        self.uv.u = u
        self.uv.v = v

    def addWeight(self,weight,boneIndex):
        if (len(self.weights) > 4):
            raise _HxException("Too many weights")
        w = io_Weight(weight,boneIndex)
        self.weights.append(w)

io_Vertex._hx_class = io_Vertex


class io_Weight:
    _hx_class_name = "io.Weight"
    __slots__ = ("weight", "boneIndex")
    _hx_fields = ["weight", "boneIndex"]

    def __init__(self,weight,boneIndex):
        self.weight = weight
        self.boneIndex = boneIndex

io_Weight._hx_class = io_Weight


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if isinstance(o,int):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g1 = 0
            _g = l
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o2 = o
                l1 = len(o2.params)
                hasParams = (l1 > 0)
                if hasParams:
                    paramsStr = ""
                    _g12 = 0
                    _g3 = l1
                    while (_g12 < _g3):
                        i1 = _g12
                        _g12 = (_g12 + 1)
                        prefix1 = ""
                        if (i1 > 0):
                            prefix1 = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields1 = python_Boot.getInstanceFields(o)
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    return toStr1
                else:
                    fields2 = python_Boot.getClassFields(o)
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    return toStr2
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d1 = o.__dict__
                keys1 = d1.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        if (field is None):
            return None
        _hx_local_0 = len(field)
        if (_hx_local_0 == 10):
            if (field == "charCodeAt"):
                if isinstance(o,str):
                    s1 = o
                    def _hx_local_1(a11):
                        return HxString.charCodeAt(s1,a11)
                    return _hx_local_1
        elif (_hx_local_0 == 11):
            if (field == "lastIndexOf"):
                if isinstance(o,str):
                    s3 = o
                    def _hx_local_2(a15):
                        return HxString.lastIndexOf(s3,a15)
                    return _hx_local_2
                elif isinstance(o,list):
                    a4 = o
                    def _hx_local_3(x4):
                        return python_internal_ArrayImpl.lastIndexOf(a4,x4)
                    return _hx_local_3
            elif (field == "toLowerCase"):
                if isinstance(o,str):
                    s7 = o
                    def _hx_local_4():
                        return HxString.toLowerCase(s7)
                    return _hx_local_4
            elif (field == "toUpperCase"):
                if isinstance(o,str):
                    s9 = o
                    def _hx_local_5():
                        return HxString.toUpperCase(s9)
                    return _hx_local_5
        elif (_hx_local_0 == 9):
            if (field == "substring"):
                if isinstance(o,str):
                    s6 = o
                    def _hx_local_6(a19):
                        return HxString.substring(s6,a19)
                    return _hx_local_6
        elif (_hx_local_0 == 4):
            if (field == "copy"):
                if isinstance(o,list):
                    def _hx_local_7():
                        return list(o)
                    return _hx_local_7
            elif (field == "join"):
                if isinstance(o,list):
                    def _hx_local_8(sep):
                        return sep.join([python_Boot.toString1(x1,'') for x1 in o])
                    return _hx_local_8
            elif (field == "push"):
                if isinstance(o,list):
                    x7 = o
                    def _hx_local_9(e):
                        return python_internal_ArrayImpl.push(x7,e)
                    return _hx_local_9
            elif (field == "sort"):
                if isinstance(o,list):
                    x11 = o
                    def _hx_local_10(f2):
                        python_internal_ArrayImpl.sort(x11,f2)
                    return _hx_local_10
        elif (_hx_local_0 == 5):
            if (field == "shift"):
                if isinstance(o,list):
                    x9 = o
                    def _hx_local_11():
                        return python_internal_ArrayImpl.shift(x9)
                    return _hx_local_11
            elif (field == "slice"):
                if isinstance(o,list):
                    x10 = o
                    def _hx_local_12(a16):
                        return python_internal_ArrayImpl.slice(x10,a16)
                    return _hx_local_12
            elif (field == "split"):
                if isinstance(o,str):
                    s4 = o
                    def _hx_local_13(d):
                        return HxString.split(s4,d)
                    return _hx_local_13
        elif (_hx_local_0 == 7):
            if (field == "indexOf"):
                if isinstance(o,str):
                    s2 = o
                    def _hx_local_14(a13):
                        return HxString.indexOf(s2,a13)
                    return _hx_local_14
                elif isinstance(o,list):
                    a = o
                    def _hx_local_15(x1):
                        return python_internal_ArrayImpl.indexOf(a,x1)
                    return _hx_local_15
            elif (field == "reverse"):
                if isinstance(o,list):
                    a5 = o
                    def _hx_local_16():
                        python_internal_ArrayImpl.reverse(a5)
                    return _hx_local_16
            elif (field == "unshift"):
                if isinstance(o,list):
                    x14 = o
                    def _hx_local_17(e2):
                        python_internal_ArrayImpl.unshift(x14,e2)
                    return _hx_local_17
        elif (_hx_local_0 == 3):
            if (field == "map"):
                if isinstance(o,list):
                    x5 = o
                    def _hx_local_18(f1):
                        return python_internal_ArrayImpl.map(x5,f1)
                    return _hx_local_18
            elif (field == "pop"):
                if isinstance(o,list):
                    x6 = o
                    def _hx_local_19():
                        return python_internal_ArrayImpl.pop(x6)
                    return _hx_local_19
        elif (_hx_local_0 == 8):
            if (field == "iterator"):
                if isinstance(o,list):
                    x3 = o
                    def _hx_local_20():
                        return python_internal_ArrayImpl.iterator(x3)
                    return _hx_local_20
            elif (field == "toString"):
                if isinstance(o,str):
                    s8 = o
                    def _hx_local_21():
                        return HxString.toString(s8)
                    return _hx_local_21
                elif isinstance(o,list):
                    x13 = o
                    def _hx_local_22():
                        return python_internal_ArrayImpl.toString(x13)
                    return _hx_local_22
        elif (_hx_local_0 == 6):
            if (field == "charAt"):
                if isinstance(o,str):
                    s = o
                    def _hx_local_23(a1):
                        return HxString.charAt(s,a1)
                    return _hx_local_23
            elif (field == "concat"):
                if isinstance(o,list):
                    a12 = o
                    def _hx_local_24(a2):
                        return python_internal_ArrayImpl.concat(a12,a2)
                    return _hx_local_24
            elif (field == "filter"):
                if isinstance(o,list):
                    x = o
                    def _hx_local_25(f):
                        return python_internal_ArrayImpl.filter(x,f)
                    return _hx_local_25
            elif (field == "insert"):
                if isinstance(o,list):
                    a3 = o
                    def _hx_local_26(a14,x2):
                        python_internal_ArrayImpl.insert(a3,a14,x2)
                    return _hx_local_26
            elif (field == "length"):
                if isinstance(o,str):
                    return len(o)
                elif isinstance(o,list):
                    return len(o)
            elif (field == "remove"):
                if isinstance(o,list):
                    x8 = o
                    def _hx_local_27(e1):
                        return python_internal_ArrayImpl.remove(x8,e1)
                    return _hx_local_27
            elif (field == "splice"):
                if isinstance(o,list):
                    x12 = o
                    def _hx_local_28(a17,a21):
                        return python_internal_ArrayImpl.splice(x12,a17,a21)
                    return _hx_local_28
            elif (field == "substr"):
                if isinstance(o,str):
                    s5 = o
                    def _hx_local_29(a18):
                        return HxString.substr(s5,a18)
                    return _hx_local_29
        else:
            pass
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        f = (c._hx_fields if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name
python_Boot._hx_class = python_Boot


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    self.has = False
                    self.x = None
                else:
                    raise _hx_e
            self.checked = True
        return self.has

python_HaxeIterator._hx_class = python_HaxeIterator


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "iterator", "indexOf", "lastIndexOf", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get"]

    @staticmethod
    def concat(a1,a2):
        return (a1 + a2)

    @staticmethod
    def iterator(x):
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        if (l < 0):
            l = 0
        _g1 = l
        while (_g1 < _hx_len):
            i = _g1
            _g1 = (_g1 + 1)
            if (a[i] == x):
                return i
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        _hx_len = len(a)
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        if (l > _hx_len):
            l = _hx_len
        while True:
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            if (a[l] == x):
                return l
        return -1

    @staticmethod
    def toString(x):
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        x.append(e)
        return len(x)

    @staticmethod
    def unshift(x,e):
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        try:
            x.remove(e)
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        if (len(x) == 0):
            return None
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        if (pos < 0):
            pos = (len(x) + pos)
        if (pos < 0):
            pos = 0
        res = x[pos:(pos + _hx_len)]
        del x[pos:(pos + _hx_len)]
        return res

    @staticmethod
    def map(x,f):
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        a.reverse()

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None
python_internal_ArrayImpl._hx_class = python_internal_ArrayImpl


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = Exception


    def __init__(self,val):
        self.val = None
        super().__init__(str(val))
        self.val = val

_HxException._hx_class = _HxException


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "rshift"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def rshift(val,n):
        return ((val % 0x100000000) >> n)
HxOverrides._hx_class = HxOverrides


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            check = s.find(_hx_str, startLeft, len(s))
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        if (startIndex < 0):
            startIndex = 0
        if (endIndex is None):
            return s[startIndex:]
        else:
            if (endIndex < 0):
                endIndex = 0
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            return s[startIndex:(startIndex + _hx_len)]
HxString._hx_class = HxString


class sys_io_File:
    _hx_class_name = "sys.io.File"
    __slots__ = ()
    _hx_statics = ["saveContent", "saveBytes"]

    @staticmethod
    def saveContent(path,content):
        f = python_lib_Builtins.open(path,"w",-1,"utf-8",None,"")
        f.write(content)
        f.close()

    @staticmethod
    def saveBytes(path,_hx_bytes):
        f = python_lib_Builtins.open(path,"wb",-1)
        f.write(_hx_bytes.b)
        f.close()
sys_io_File._hx_class = sys_io_File

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

Date.EPOCH_UTC = python_lib_datetime_Datetime.fromtimestamp(0,python_lib_datetime_Timezone.utc)
io_Vertex.MAX_WEIGHT_COUNT = 4
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")